options { STATIC=false;}
PARSER_BEGIN(Parser)
package plg.proto;

import java.util.*;

class Parser extends BaseParser{
}

PARSER_END(Parser)
  
  /* Reglas lexicas */
  SKIP:{<["\t"," ", "\r","\b","\n"]>}
  TOKEN:{<OR:"or">}
  TOKEN:{<AND:"and">}
  TOKEN:{<IF:"if">}
  TOKEN:{<FI:"fi">}
  TOKEN:{<THEN:"then">}
  TOKEN:{<ELSE:"else">}
  TOKEN:{<TRUE:"true">}
  TOKEN:{<FALSE:"false">}
  TOKEN:{<WRITE:"write">}
  TOKEN:{<PAP:"(">}
  TOKEN:{<PCIERRE:")">}
  TOKEN:{<STRING:"\""(~["\""])*"\"">}

/* Reglas sintacticas */
void s(Attr a) : 
	{
		Attr ia;
	}{
		{ia = Attr.create().etqh(0);}
		i(ia)
		<EOF>
		{a.cod(ia.cod());}
	}

void i(Attr a) :
	{
		Attr ea, ia1, ia2;
	}{
		<IF>
		{ea = Attr.copy(a);}
		e(ea)
		<THEN>
		{ia1 = Attr.create().etqh(ea.etq() + 1);}
		i(ia1)
		<ELSE>
		{ia2 = Attr.create().etqh(ia1.etq() + 1);}
		i(ia2)
		<FI>
		{a.etq(ia2.etq()).cod(patch(ea.cod(), concat(ea.lirv(), ea.lirf()), ea.etq())).codAdd(ir_f(ia1.etq()+1)).codAdd(ia1.cod()).codAdd(ir_a(ia2.etq())).codAdd(ia2.cod());}
	|
		<WRITE>
		<STRING>
		{a.etq(a.etqh() + 2).codAdd(instr("apila_str",string.lex), instr("escribe"));}
	}
	
void e (Attr a) :
	{
		Attr ta, rea;
	}{
		{ta = Attr.copy(a);}
		t(ta)
		{rea = Attr.create().etqh(ta.etq()).lirvh(ta.lirv()).lirfh(ta.lirf()).codh(ta.cod());}
		re(rea)
		{a.cod(rea.cod()).etq(rea.etq());}
	}
	
void re (Attr a) :
	{
		Attr ta, rea;
	}{
		<OR>
		{ta = Attr.create().etqh(a.etqh() + 3);}
		t(ta)
		{rea = Attr.create().etqh(ta.etq())
			.lirvhAdd(a.lirvh()).lirvhAdd(ta.lirv()).lirvhAdd(a.etqh() + 1)
			.lirfh(ta.lirf())
			.codh(patch(a.codh(), a.lirvh(), a.lirfh()))
				.codhAdd(instr("copia"), instr("ir_v", null), instr("desapila")).codhAdd(ta.cod());}
		re(rea)
		{a.cod(rea.cod()).etq(rea.etq());}
	|
		{a.cod(a.codh()).etq(a.etqh()).lirv(a.lirvh()).lirf(a.lirf());}
	}
	
void t (Attr a) :
	{
		Attr fa, rta;
	}{
		{fa = Attr.create().etqh(a.etqh());}
		f(fa)
		{rta = Attr.create().codh(fa.cod()).etqh(fa.etqh()).lirvh(fa.lirv()).lirfh(fa.lirf());}
		rt(rta)
		{a.cod(rta.cod()).etq(rta.etq());}
	}
	
void rt (Attr a) :
	{
		Attr fa, rta;
	}{
		<AND>
		{fa = Attr.create().etqh(a.etqh() + 3);}
		f(fa)
		{rta = Attr.create().etqh(fa.etq()).lirvh(fa.lirv()).lirfhAdd(rta.lirf()).lirfhAdd(fa.lirf()).lirfhAdd(ta.etq() + 1).codh(patch(a.codh(), a.lirvh(), a.lirfh())).codhAdd(instr("copia"), instr("ir_f", null), instr("desapila")).codhAdd(fa.cod());}
		rt(rta)
		{a.cod(rta.cod()).etq(rta.etqh());}
	|
		 {a.cod(a.codh()).etq(a.etqh()).lirv(a.lirvh()).lirf(a.lirf());}
	}
	
void f (Attr a) :
	{
		Attr ea;
	}{
		<TRUE>
		{a.codAdd(instr("apila_true")).etq(a.etqh() + 1).lirvClear().lirfClear();}
	|
		<FALSE>
		{a.codAdd(instr("apila_false")).etq(a.etqh() + 1).lirvClear().lirfClear();}
	|
		<PAP>
		{ea = Attr.create().etqh(a.etqh());}
		e(ea)
		<PCIERRE>
		{a.cod(ea.cod()).etq(ea.etq()).lirv(ea.lirv()).lirf(ea.lirf());}
	}
	